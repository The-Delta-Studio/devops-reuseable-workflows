name: Deploy
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Valid values are 'dev'|'stable'|'production'
      environment-url:
        required: true
        type: string
        description: The URL to the enviornment you're deploying
      aws-region:
        required: true
        type: string
        description: AWS Region you are deploying your container image to
      aws-role-to-assume:
        required: true
        type: string
        description: AWS Role to assume enable github to deploy new image version
      aws-role-session-name:
        required: true
        type: string
        description: Authorised AWS Role name specified by your Local AWS Operator.
      aws-ecr-registry-type:
        required: false
        type: string
        description: AWS ECR Repository Visibility. Defaults to private. Set it 'public' accordingly
        default: private
      build-artifact-name:
        required: true
        type: string
        description: Name of the Artifact created in build stage
      build-artifact-path:
        required: false
        type: string
        description: Path to the Artifact created in build stage. Defaults to /
        default: /
      semver:
        required: true
        type: string
        description: Semver generated by GitVersion during build phase
      aws-ecr-repository-name:
        required: true
        type: string
        description: Name of AWS ECR Repo. Usually should match the name of the code repository
    secrets:
      aws-ecr-registry:
        required: false
        description: AWS ECR Registry. Defaults to the Delta Shared Registry

jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment-url }}
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-to-assume }}
          role-session-name: ${{ inputs.aws-role-session-name }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: ${{ inputs.aws-ecr-registry-type }}

      - name: Download artifact
        uses: actions/download-artifacts@v3
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}

      - name: Build, tag and push container image
        working-directory: ${{ inputs.build-artifact-path }}
        env:
          REGISTRY: ${{ inputs.aws-ecr-registry }}
          REPOSITORY: ${{ inputs.aws-ecr-repository-name }}
          SEMVER: ${{ inputs.semver }}
          ENVIRONMENT: ${{ inputs.environment }}
        if: ${{ inputs.environment != 'production' }}
        run: |
          if [ "$ENVIRONMENT" = "stable" ]; then
            docker build -t $REGISTRY/$REPOSITORY:$SEMVER -t $REGISTRY/$REPOSITORY:stable-${{ github.sha }} .
            docker push $REGISTRY/$REPOSITORY:stable-${{ github.sha }}
          elif [ "$ENVIRONMENT" = "production" ]; then
              docker build -t $REGISTRY/$REPOSITORY:$SEMVER .
          else
            docker build -t $REGISTRY/$REPOSITORY:$SEMVER -t $REGISTRY/$REPOSITORY:dev-${{ github.sha }} .
            docker push $REGISTRY/$REPOSITORY:dev-${{ github.sha }}
          fi

          docker push $REGISTRY/$REPOSITORY:$SEMVER
      